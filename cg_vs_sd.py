# -*- coding: utf-8 -*-
"""CG_vs_SD.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OvuMrqKbD_BQ4qaGe5kSO_wk5X3e7isP
"""

from numpy.linalg import norm
import numpy as np
import matplotlib.pyplot as plt
from astropy.table import QTable, Table, Column
# fahad.mostafa @ttu 2021
#======= Unpreconditioned CG ================#
def CG(A,b, maxiter=100, tol=1.0e-8):
    # Initialization
    x0 = np.zeros_like(b)
    r = 1.0*b
    p = 1.0*b
    x = np.zeros_like(b)

    normB = norm(b)
    X_CG =[]
    X_CG.append(x0)

    # main loop
    for k in range(maxiter):
        rTr = np.dot(r,r)
        Ap = np.dot(A,p)
        pTAp = np.dot(p,Ap)
        alpha = rTr/pTAp
        x = x+ alpha*p
        r = r - alpha*Ap
        beta = np.dot(r,r)/rTr
        p = r + beta*p

        X_CG.append(x)
        
        normR = norm(r)
        print('residuals_cg',norm(r))
        if normR <= tol*normB:
            print('CG converged!')
            return (k+1,np.array(X_CG))

 #===== Steepest Descent method  ============#     
def SD(A,b, maxiter=100, tol=1.0e-3):
        # Initialization
    x0 = np.array([0,0])
    r = 1.0*b
    p = np.dot(A,r)
    x = np.zeros_like(b)

    normB = norm(b)
    X_SD =[]
    X_SD.append(x0)

    # main loop
    for k in range(maxiter):
        rTr = np.dot(r,r)
        pTr = np.dot(p,r)
        alpha = rTr/pTr
        x = x + alpha*r
        r = r-alpha*p
        
        print('residuals_sd',norm(r))
        p = np.dot(A,r)

        X_SD.append(x)

        normR = norm(r)

        if normR <= tol*normB:
            print('SD converged!')
            return(k+1, np.array(X_SD))
    

if __name__=='__main__':
    A = np.array([[9,0],[0,1]])
    b = np.array([-0.5,1])
    kcg,xcg = CG(A,b, maxiter=100, tol=1.0e-8)
    ksd,xsd = SD(A,b, maxiter=100, tol=1.0e-3)
    print ("CG convergence after no of iteration")
    print(kcg)
    print ("SD convergence after no of iteration")
    print(ksd)

    #print(x)

    x = np.linspace(-3/4.0, 3/4.0, 100)
    y = np.linspace(0, 3/2.0, 100)
    X1, X2 = np.meshgrid(x, y)
    f = 0.5*(9*X1**2 + X2**2) + 0.5*X1-X2
    plt.contour(X1, X2, f, colors='violet')
    
    plt.plot(xsd[:, 0], xsd[:, 1], color = 'r', label = "Steepest Descent",\
             linewidth = 1.25)

    plt.plot(xcg[:, 0], xcg[:, 1], color = 'b', label = "Conjugate Gradient", \
             linewidth = 1.25)

    plt.savefig('compCGvsSD.pdf')